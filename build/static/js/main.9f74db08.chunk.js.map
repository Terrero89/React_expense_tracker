{"version":3,"sources":["components/NewExpense/ExpenseForm.js","components/NewExpense/NewExpense.js","components/UI/Card.js","components/expenses/ExpenseDate.js","components/expenses/ExpenseItem.js","components/expenses/ExpenseFilter.js","components/expenses/Expenses.js","App.js","index.js"],"names":["ExpenseForm","props","useState","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","onSubmit","event","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","className","type","value","onChange","target","min","step","max","NewExpense","enteredExpenseData","id","Math","random","toString","onAddExpense","Card","classes","children","ExpenseDate","month","toLocaleString","day","year","getFullYear","ExpenseItem","ExpensesFilter","selected","onChangeFilter","Expenses","filteredYear","setFilteredYear","filteredExpenses","items","filter","expense","expensesContent","length","map","selectedYear","DUMMY_EXPENSES","App","expenses","setExpenses","prevExpenses","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.9f74db08.chunk.js","sourcesContent":["// concepts: onClick - onSubmit, useState(different ways to manage states) -- two way binding with value=\"\"\n\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\n\nconst ExpenseForm = (props) => {\n  //useState to be able to capture the information typed.\n  //? this way is better since yu manage state changes separately from each other\n  //?STATE OF THE INFORMATION ENTERED\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState('');\n\n  //?HANDLERS TO RECORD THE INPUTS\n  //?state that will read the values of usestate\n  const titleChangeHandler = (event) => {\n    setEnteredTitle(event.target.value);\n  };\n  const amountChangeHandler = (event) => {\n    setEnteredAmount(event.target.value);\n  };\n  const dateChangeHandler = (event) => {\n    setEnteredDate(event.target.value);\n  };\n //?SUBMIT HANDLER THAT WILL SUBMIT THE DATA IN IT\n  const submitHandler = (event) => {\n    event.preventDefault(); //event.preventDefault to do no reload when clicked\n\n    //object that contains the expense data information to be passed to next component with event handler\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate), //WILL CONVERT IT INTO A DATE OBJECT CORRECT FORMAT\n    };\n\n\n    props.onSaveExpenseData(expenseData); // we add expenseData as a parameter to submit the same information to the parent elements\n    setEnteredTitle(\"\");\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label>Title</label>\n          <input\n            type=\"text\"\n            value={enteredTitle}\n            onChange={titleChangeHandler}\n          />\n          \n        </div>\n        <div className=\"new-expense__control\">\n          <label>Amount</label>\n          <input\n            type=\"number\"\n            min=\"0.01\"\n            step=\"0.01\"\n            value={enteredAmount} //use for two way binding so value can be seen on input field\n            onChange={amountChangeHandler}\n          />\n        </div>\n\n        <div className=\"new-expense__control\">\n          <label>Date</label>\n          <input\n            type=\"date\"\n            min=\"2019-01-01\"\n            max=\"2022-12-31\"\n            value={enteredDate}\n            onChange={dateChangeHandler}\n          />\n        </div>\n      </div>\n\n      <div className=\"new-expense__actions\">\n        <button type=\"submit\">Add Expense</button>\n      </div>\n    </form>\n  );\n};\n\nexport default ExpenseForm;\n","import React from \"react\";\nimport \"./NewExpense.css\";\nimport ExpenseForm from \"./ExpenseForm\";\n\nconst NewExpense = (props) => {\n  //?we now save and keep the props to use.\n  //?enteredExpenseData is just parameter name for the data sent from the form in ExpenseForm\n  const saveExpenseDataHandler = (enteredExpenseData) => {\n    const expenseData = {\n      //?this is all the data together from the submitted form\n      ...enteredExpenseData,\n      id: Math.random().toString(), //dynamic id for now.\n    };\n \n    props.onAddExpense(expenseData);\n  };\n\n  return (\n    <div className=\"new-expense\">\n      <ExpenseForm onSaveExpenseData={saveExpenseDataHandler} />\n    </div>\n  );\n};\n\nexport default NewExpense;\n","import './Card.css'\n\nfunction Card(props){\n    const classes = 'card ' + props.className; //TODO: this is to make sure any value set in the class name prop is added to the classes const, class from expense item,\n    return <div className= {classes}>{props.children}</div>\n\n}\n\n\nexport default Card;","import \"./ExpenseDate.css\";\nconst ExpenseDate = (props) => {\n  const month = props.date.toLocaleString(\"en-us\", { month: \"long\" });\n  const day = props.date.toLocaleString(\"en-us\", { day: \"2-digit\" });\n  const year = props.date.getFullYear();\n\n  return (\n    <div className=\"expense-date\">\n      <div className=\"expense-date__month\">{month}</div>\n\n      <div className=\"expense-date__year\">{year}</div>\n\n      <div className=\"expense-date__day\">{day}</div>\n    </div>\n  );\n};\n\nexport default ExpenseDate;\n","import { React} from 'react'\nimport ExpenseDate from \"./ExpenseDate.js\";\nimport \"./ExpenseItem.css\";\nimport Card from \"../UI/Card.js\";\n\n\n\nconst ExpenseItem = (props) => {\n  //set the start when we click on the click handler to show setTitle Value  \n\n  return (\n    <Card className=\"expense-item\">\n      <ExpenseDate date={props.date} />\n\n      <div className=\"expense-item__description\">\n        <h2>{props.title}</h2>\n\n        <div className=\"expense-item__price\" >{props.amount}</div>\n      </div>  \n\n    </Card>\n  );\n}\n\nexport default ExpenseItem;","import React from \"react\";\n\nimport \"./ExpenseFilter.css\";\n\n//TODO: THIS PROP WE GOING TO USE HERE FROM EXPENSE.JS\nconst ExpensesFilter = (props) => {\n\n    //TODO  WILL HANDLE THE CHANGE ON FILTER SELECTION ON CHANGE IN SELECT HTML\n    const filterHandler = (event) => {\n      // console.log(event.target.value)\n      //?THIS PROP WE GOING TO USE HERE FROM EXPENSE.JS\n      props.onChangeFilter(event.target.value); //? this will use onChangeFilter as a function that receives the event and forwards the event.target.value\n    }\n  \n  //?PROP SELECTED IS USED TO ADD THE DEFAULT VALUE OF THE USE STATE IN PARENT \n    return (\n      \n\n    <div className=\"expenses-filter\">\n      <div className=\"expenses-filter__control\">\n        <label>Filter by year</label>\n        <select value={props.selected} onChange={filterHandler}>\n          <option value=\"2022\">2022</option>\n          <option value=\"2021\">2021</option>\n          <option value=\"2020\">2020</option>\n          <option value=\"2019\">2019</option>\n        </select>\n      </div>\n    </div>\n  );\n};\n\nexport default ExpensesFilter;\n","import React, { useState } from \"react\";\n\nimport Card from \"../UI/Card\";\nimport ExpenseItem from \"../expenses/ExpenseItem\";\nimport ExpenseFilter from \"./ExpenseFilter\";\nimport \"./Expenses.css\";\nconst Expenses = (props) => {\n  const [filteredYear, setFilteredYear] = useState(\"2020\");\n  //todo: USESTATE WILL BE USED IN THE COMPONENT THE STATE WILL CHANGE\n  //TODO: Function that will be done from parent to reflect in child component\n  //TODO: then pass function filterChangeHandler to child component ExpenseFilter to point to this function\n  //todo:  filtered year will be reflected in the default value of the useState('2020') with value in child component ExpenseFilter\n  const filterChangeHandler = (selectedYear) => {\n    // console.log(\"Expenses.JS\");\n    // console.log(selectedYear);\n    //?instead of logging the value we add the change of value with state\n\n    setFilteredYear(selectedYear); //? WILL BE EQUAL TO THE VALUE OF THE SELECTED YEAR ARGUMENT IN PARTENT\n  };\n\n  const filteredExpenses = props.items.filter(\n    (expense) => expense.date.getFullYear().toString() === filteredYear\n  );\n\n  let expensesContent = <p>No Expenses Found</p>;\n  if (filteredExpenses.length > 0) {\n    expensesContent =\n      filteredExpenses.length > 0 &&\n      filteredExpenses.map((expense) => (\n        <ExpenseItem\n          key={expense.id}\n          title={expense.title}\n          amount={expense.amount}\n          date={expense.date}\n        />\n      ));\n  }\n\n  return (\n    <div>\n      <Card className=\"expenses\">\n        <ExpenseFilter\n          // CONTROLLED COMPONENT WITH THE SELECTED AND ONCHANGEFILTER\n          selected={filteredYear}\n          onChangeFilter={filterChangeHandler}\n        />\n        {expensesContent}\n      </Card>\n    </div>\n  );\n};\n\nexport default Expenses;\n","import React, {useState} from 'react';\n\nimport NewExpense from \"./components/NewExpense/NewExpense\";\nimport Expenses from \"./components/expenses/Expenses\";\n\n\n  const DUMMY_EXPENSES = [\n    {\n      id: \"e1\",\n      title: \"Toilet Paper\",\n      amount: 94.12,\n      date: new Date(2020, 7, 14),\n    },\n    { id: \"e2\", title: \"New TV\", amount: 799.49, date: new Date(2021, 2, 12) },\n    {\n      id: \"e3\",\n      title: \"Car Insurance\",\n      amount: 294.67,\n      date: new Date(2021, 2, 28),\n    },\n    {\n      id: \"e4\",\n      title: \"New Desk (Wooden)\",\n      amount: 450.99,\n      date: new Date(2021, 5, 12),\n    },\n  ];\n\n\nconst App = () => {\n    \n const[expenses,setExpenses] = useState(DUMMY_EXPENSES)\n  \n\n  const addExpenseHandler = expense => {\n    // console.log('in APP.JS');\n    // console.log(expense)\n      //?not correct since does not contain last snapshot of state\n    // setExpenses([expense, ...expenses])\n    //?correct!\n    setExpenses(prevExpenses => {\n      return [expense, ...prevExpenses];\n    })\n  }\n\n  return (\n    <div>\n      <NewExpense onAddExpense={addExpenseHandler}/>\n      <Expenses items={expenses}></Expenses>\n    </div>\n  );\n};\n\n\nexport default App;\n","import ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}